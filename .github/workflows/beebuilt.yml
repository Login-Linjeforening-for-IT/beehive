name: BeeBuilt CI/CD Pipeline

on:
  push:
    branches: ["dev", "main"]
  pull_request:
    branches: ["dev", "main"]

env:
  GIT_USER_NAME: BeeBuilt Bot
  GIT_USER_EMAIL: beebuiltbot@login.no

jobs:
  fix-version:
    name: üß© Fix & Update Version
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag for main and dev
        run: |
          main_version=$(git show origin/main:package.json 2>/dev/null | jq -r '.version' 2>/dev/null)
          dev_version=$(git show origin/dev:package.json 2>/dev/null | jq -r '.version' 2>/dev/null)
          echo "main_tag=$main_version" >> $GITHUB_ENV
          echo "dev_tag=$dev_version" >> $GITHUB_ENV

      - name: New version
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          main_tag="$main_tag"
          dev_tag="$dev_tag"
          new_version=""
          if [ "$branch" = "main" ]; then
            if [ "$main_tag" != "$dev_tag" ]; then
              new_version="$dev_tag"
              echo "Main and dev versions differ. Syncing main to dev version: $dev_tag"
            else
              # main is same as dev, bump patch/minor
              changed_files=$(git diff --name-only origin/main...HEAD | wc -l)
              echo "Changed files: $changed_files"
              current_version=$(jq -r '.version' package.json)
              IFS='.' read -r major minor patch <<< "$current_version"
              if [ "$changed_files" -lt 4 ]; then
                patch=$((patch + 1))
                echo "Bumping patch version."
              else
                minor=$((minor + 1))
                patch=0
                echo "Bumping minor version."
              fi
              new_version="$major.$minor.$patch"
            fi
          elif [ "$branch" = "dev" ]; then
            # Always bump patch/minor on dev
            changed_files=$(git diff --name-only origin/main...HEAD | wc -l)
            echo "Changed files: $changed_files"
            current_version=$(jq -r '.version' package.json)
            IFS='.' read -r major minor patch <<< "$current_version"
            if [ "$changed_files" -lt 4 ]; then
              patch=$((patch + 1))
              echo "Bumping patch version."
            else
              minor=$((minor + 1))
              patch=0
              echo "Bumping minor version."
            fi
            new_version="$major.$minor.$patch"
          else
            # For other branches, keep previous logic
            changed_files=$(git diff --name-only origin/main...HEAD | wc -l)
            echo "Changed files: $changed_files"
            current_version=$(jq -r '.version' package.json)
            IFS='.' read -r major minor patch <<< "$current_version"
            if [ "$changed_files" -lt 4 ]; then
              patch=$((patch + 1))
              echo "Bumping patch version."
            else
              minor=$((minor + 1))
              patch=0
              echo "Bumping minor version."
            fi
            new_version="$major.$minor.$patch"
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Update package.json
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/vendor/*" -exec sh -c '
            file="$1"
            new_ver="${2#v}"
            if ! sed -n "3p" "$file" | grep -q "\"version\":"; then
              echo "Version not at line 3 in $file"
              exit 1
            fi
            sed -i "3s/\"version\": \"[^\"]*\"/\"version\": \"$new_ver\"/" "$file"
          ' _ {} "${new_version}" \;

      - name: Update lock file
        run: |
          find . -name "package-lock.json" -not -path "*/node_modules/*" -not -path "*/vendor/*" -exec sh -c '
            file="$1"
            new_ver="${2#v}"
            if ! sed -n "3p" "$file" | grep -q "\"version\":"; then
              echo "Version not at line 3 in $file"
              exit 1
            fi
            if ! sed -n "9p" "$file" | grep -q "\"version\":"; then
              echo "Version not at line 9 in $file"
              exit 1
            fi
            sed -i "3s/\"version\": \"[^\"]*\"/\"version\": \"$new_ver\"/" "$file"
            sed -i "9s/\"version\": \"[^\"]*\"/\"version\": \"$new_ver\"/" "$file"
          ' _ {} "${new_version}" \;

      - name: Commit changes
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"
          git add $(find . -name "package.json" -o -name "package-lock.json" | grep -v node_modules | grep -v vendor)
          git commit -m "v$new_version" || echo "No changes to commit"
          git push origin $GITHUB_REF_NAME

      - name: Create Git Tag
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"
          branch=$(git rev-parse --abbrev-ref HEAD)
          tag="${{ env.new_version }}"
          if [ "$branch" = "dev" ]; then
            tag="${{ env.new_version }}-dev"
          fi
          git tag "$tag"
          git push origin "$tag"

      - name: Create dev tag if not exists
        if: github.ref == 'refs/heads/main'
        run: |
          dev_tag="${{ env.new_version }}-dev"
          if ! git tag -l | grep -q "^${dev_tag}$"; then
            git tag $dev_tag
            git push origin $dev_tag
          fi

  rebase:
    name: üîÑ Rebase from main to dev
    runs-on: ubuntu-latest
    needs: fix-version
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout dev
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

      - name: Rebase from main to dev
        run: |
          git rebase origin/main

      - name: Push dev
        run: git push origin dev

  build:
    name: üê≥ Build Containers
    runs-on: ubuntu-latest
    needs: fix-version

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 1Password Secrets Action
        uses: 1Password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: List 1Password items in repo vault
        run: |
          # Use repo name as vault/item prefix
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "Looking for 1Password items in vault: $REPO_NAME"

      - name: Create .env file
        run: |
          echo "Generating .env file for Docker Compose"
          cat <<EOF > .env
          DOCKER_USER=${DOCKER_USER}
          DOCKER_PASS=${DOCKER_PASS}
          DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
          EOF
          echo ".env file created:"
          cat .env

      - name: Login to Docker
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login "${{ secrets.DOCKER_REGISTRY }}" -u "${{ secrets.DOCKER_USER }}" --password-stdin
        
      - name: Build with Docker Compose
        run: docker compose up -d --build

      - name: Check exposed ports
        run: |
          ports=$(docker compose ps --format json \
            | jq -sr '.[] | .Publishers? // [] | .[] | .PublishedPort' \
            | sort -u)

          for port in $ports; do
            echo "üïì Waiting for port $port to respond..."

            # Try up to 10 times with 5 seconds between
            for i in {1..10}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$port || echo "000")
              if [ "$code" = "200" ]; then
                echo "‚úÖ Port $port is ready (HTTP $code)"
                break
              else
                echo "‚è≥ Attempt $i: got code $code, retrying in 5s..."
                sleep 5
              fi
            done

            if [ "$code" != "200" ]; then
              echo "‚ùå Port $port failed with code $code after retries"
              curl -H "Content-Type: application/json" \
                -X POST \
                -d "{\"embeds\":[{\"title\":\"Validation Failed\",\"description\":\"Port $port returned code $code after retries\"}]}" \
                "$DISCORD_WEBHOOK"
              exit 1
            fi
          done

      - name: Install pup
        run: |
          curl -LO https://github.com/ericchiang/pup/releases/download/v0.4.0/pup_v0.4.0_linux_amd64.zip
          unzip pup_v0.4.0_linux_amd64.zip
          chmod +x pup
          sudo mv pup /usr/local/bin/
          pup --help

      - name: Validate UI routes & elements
        run: |
          # Check if wget exists (fallback to install)
          if ! command -v wget >/dev/null 2>&1; then
            echo "‚ö†Ô∏è wget not found, installing...abc"
            sudo apt-get update -y && sudo apt-get install -y wget
          fi
          if nc -z localhost 3000; then
            echo "Port 3000 is open, proceeding with validation..."
            SPEC=$(cat .test.json)
            for PATH in $(echo "$SPEC" | jq -r 'keys[]'); do
              echo "Checking $PATH ..."
              HTML=$(curl -s "http://localhost:3000$PATH")
              for ELEM in $(echo "$SPEC" | jq -r --arg path "$PATH" '.[$path][]'); do
                echo "  Checking element $ELEM ..."
                FOUND=$(echo "$HTML" | pup "[data-testid=\"$ELEM\"]" | wc -l)
                if [ "$FOUND" -eq 0 ]; then
                  echo "‚ùå Element $ELEM not found at $PATH"
                  exit 1
                fi
              done
            done
          else
            echo "Port 3000 not open ‚Äî skipping route validation."
          fi

      - name: Collect logs
        run: |
          mkdir -p logs
          docker ps --format '{{.Names}}' | while read name; do
            echo "Capturing $name"
            docker logs $name > "logs/${name}.log" || true
          done

      - name: Tag & Push
        run: |
          IMAGE="${{ secrets.DOCKER_REGISTRY }}/tekkom/dev/${{ github.ref_name }}"
          VERSION=${{ needs.fix-version.outputs.new_tag }}

          echo "Image: $IMAGE"
          echo "Version: $VERSION"

          # Build all services
          docker compose build

          # Get all service names from docker-compose.yml
          SERVICES=$(docker compose config --services)

          if [ -z "$SERVICES" ]; then
            echo "‚ùå No services found in docker-compose.yml"
            exit 1
          fi

          # Loop over services and tag/push each
          for SERVICE in $SERVICES; do
            echo "Processing service: $SERVICE"
            IMAGE_ID=$(docker compose images -q $SERVICE)
            if [ -z "$IMAGE_ID" ]; then
              echo "‚ùå No image found for service $SERVICE"
              exit 1
            fi

            docker tag "$IMAGE_ID" "$IMAGE-$SERVICE:$VERSION"
            docker push "$IMAGE-$SERVICE:$VERSION"
          done

  update:
    name: üîÑ Update Kubernetes Repo
    runs-on: ubuntu-latest
    needs: [build, fix-version]
    steps:
      - name: Determine repo path
        id: set_repo
        run: |
          if [ "${GITHUB_REF##*/}" = "here" ]; then
            echo "repo_name=infra-prod-cluster" >> $GITHUB_ENV
          else
            echo "repo_name=test-cluster" >> $GITHUB_ENV
          fi

      - name: Checkout kube repo
        uses: actions/checkout@v4
        with:
          repository: Login-Linjeforening-for-IT/${{ env.repo_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: kuberepo

      - name: Update image version
        run: |
          cd kuberepo
          yq e -i '.spec.template.spec.containers[0].image = "${{ secrets.DOCKER_REGISTRY }}/${GITHUB_REF##*/}:${{ needs.fix-version.outputs.new_tag }}"' deployment.yaml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -am "Update BeeBuilt image to ${{ needs.fix-version.outputs.new_tag }}"
          git push
