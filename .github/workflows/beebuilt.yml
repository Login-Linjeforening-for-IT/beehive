name: BeeBuilt CI/CD Pipeline

on:
  push:
    branches: ["dev", "main"]
  pull_request:
    branches: ["dev", "main"]

jobs:
  fix-version:
    name: üß© Fix & Update Version
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'Bump version')
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          latest=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "latest_tag=$latest" >> $GITHUB_ENV

      - name: Bump version
        id: bump
        run: |
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          changed_files=$(git diff --name-only $latest_tag..HEAD | wc -l)
          if [ "$changed_files" -lt 4 ]; then
            patch=$((patch+1))
          else
            minor=$((minor+1))
            patch=0
          fi
          new_tag="$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "Bumped to $new_tag"

      - name: Update package.json
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/vendor/*" -exec sh -c '
            file="$1"
            new_ver="${2#v}"
            if ! sed -n "3p" "$file" | grep -q "\"version\":"; then
              echo "Version not at line 3 in $file"
              exit 1
            fi
            sed -i "3s/\"version\": \"[^\"]*\"/\"version\": \"$new_ver\"/" "$file"
          ' _ {} "${new_tag}" \;

      - name: Update lock file
        run: |
          find . -name "package-lock.json" -not -path "*/node_modules/*" -not -path "*/vendor/*" -exec sh -c '
            file="$1"
            new_ver="${2#v}"
            if ! sed -n "3p" "$file" | grep -q "\"version\":"; then
              echo "Version not at line 3 in $file"
              exit 1
            fi
            if ! sed -n "9p" "$file" | grep -q "\"version\":"; then
              echo "Version not at line 9 in $file"
              exit 1
            fi
            sed -i "3s/\"version\": \"[^\"]*\"/\"version\": \"$new_ver\"/" "$file"
            sed -i "9s/\"version\": \"[^\"]*\"/\"version\": \"$new_ver\"/" "$file"
          ' _ {} "${new_tag}" \;

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add $(find . -name "package.json" -o -name "package-lock.json" | grep -v node_modules | grep -v vendor)
          git commit -m "Bump version to $new_tag" || echo "No changes to commit"
          git push origin main

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

  build:
    name: üê≥ Build Containers
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 1Password Secrets Action
        uses: 1Password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: List 1Password items in repo vault
        run: |
          # Use repo name as vault/item prefix
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "Looking for 1Password items in vault: $REPO_NAME"

      - name: Create .env file
        run: |
          echo "Generating .env file for Docker Compose"
          cat <<EOF > .env
          DOCKER_USER=${DOCKER_USER}
          DOCKER_PASS=${DOCKER_PASS}
          DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
          EOF
          echo ".env file created:"
          cat .env

      - name: Login to Docker
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login "${{ secrets.DOCKER_REGISTRY }}" -u "${{ secrets.DOCKER_USER }}" --password-stdin
        
      - name: Build with Docker Compose
        run: docker compose up -d --build

  validate:
    name: üîç Validate Deployment
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for services
        run: sleep 10

      - name: Check exposed ports
        run: |
          ports=$(docker compose ps --format json | jq -r '.[].Publishers[].PublishedPort')
          for port in $ports; do
            echo "Checking port $port..."
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$port)
            if [ "$code" != "200" ]; then
              echo "‚ùå Port $port failed with code $code"
              curl -H "Content-Type: application/json" \
                -X POST \
                -d "{\"embeds\":[{\"title\":\"Validation Failed\",\"description\":\"Port $port returned code $code\"}]}" \
                ${{ secrets.DISCORD_WEBHOOK }}
              exit 1
            fi
          done


      - name: Install pup
        run: |
          curl -LO https://github.com/EricChiang/pup/releases/download/v0.4.0/pup_linux_amd64.zip
          unzip pup_linux_amd64.zip
          chmod +x pup
          sudo mv pup /usr/local/bin/
          pup -v

      - name: Validate routes & elements
        run: |
          # Read the JSON spec
          SPEC=$(cat routes.test.json)

          # Loop over paths
          for PATH in $(echo "$SPEC" | jq -r 'keys[]'); do
            echo "Checking $PATH ..."
            # Request HTML
            HTML=$(curl -s "http://localhost:3000$PATH")
            
            # Loop over expected elements
            for ELEM in $(echo "$SPEC" | jq -r --arg path "$PATH" '.[$path][]'); do
              echo "  Checking element $ELEM ..."
              FOUND=$(echo "$HTML" | pup "[data-testid=\"$ELEM\"]" | wc -l)
              if [ "$FOUND" -eq 0 ]; then
                echo "‚ùå Element $ELEM not found at $PATH"
                exit 1
              fi
            done
          done

      - name: Take screenshots
        run: |
          mkdir -p screenshots
          docker ps --format '{{.Names}}' | while read name; do
            echo "Capturing $name"
            docker logs $name > "screenshots/${name}.log" || true
          done

  tag:
    name: üè∑Ô∏è Tag & Push Image
    runs-on: ubuntu-latest
    needs: [build, validate, fix-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitLab Registry
        run: echo ${{ secrets.GITLAB_TOKEN }} | docker login registry.gitlab.com -u ${{ secrets.GITLAB_USER }} --password-stdin

      - name: Tag & Push
        run: |
          IMAGE="registry.gitlab.com/${{ secrets.GITLAB_PROJECT }}"
          VERSION=${{ needs.fix-version.outputs.new_tag }}
          docker compose build
          docker tag beebuilt_app $IMAGE:$VERSION
          docker push $IMAGE:$VERSION

  update:
    name: üîÑ Update Kubernetes Repo
    runs-on: ubuntu-latest
    needs: [tag, fix-version]
    steps:
      - name: Checkout kube repo
        uses: actions/checkout@v4
        with:
          repository: your-org/kubernetes-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          path: kuberepo

      - name: Update image version
        run: |
          cd kuberepo
          yq e -i '.spec.template.spec.containers[0].image = "registry.gitlab.com/${{ secrets.GITLAB_PROJECT }}:${{ needs.fix-version.outputs.new_tag }}"' deployment.yaml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -am "Update BeeBuilt image to ${{ needs.fix-version.outputs.new_tag }}"
          git push
