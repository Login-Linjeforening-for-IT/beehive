name: BeeBuilt CI/CD Pipeline

on:
  push:
    branches: ["dev", "main"]
  pull_request:
    branches: ["dev", "main"]

jobs:
  fix-version:
    name: üß© Fix & Update Version
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          latest=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "latest_tag=$latest" >> $GITHUB_ENV

      - name: Bump version
        id: bump
        run: |
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch+1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "Bumped to $new_tag"

      - name: Create Git Tag
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

  build:
    name: üê≥ Build Containers
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 1Password Secrets Action
        uses: 1Password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: List 1Password items in repo vault
        run: |
          # Use repo name as vault/item prefix
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "Looking for 1Password items in vault: $REPO_NAME"
          
      - name: Use secrets
        run: |
          echo "Docker user: $DOCKER_USER"
          docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

      - name: Create .env file
        run: |
          echo "Generating .env file for Docker Compose"
          cat <<EOF > .env
          DOCKER_USER=${DOCKER_USER}
          DOCKER_PASS=${DOCKER_PASS}
          DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
          EOF
          echo ".env file created:"
          cat .env

      - name: Login to Docker
        run: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
        
      - name: Build with Docker Compose
        run: docker compose up -d --build

  validate:
    name: üîç Validate Deployment
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for services
        run: sleep 10

      - name: Check exposed ports
        run: |
          ports=$(docker compose ps --format json | jq -r '.[].Publishers[].PublishedPort')
          for port in $ports; do
            echo "Checking port $port..."
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$port)
            if [ "$code" != "200" ]; then
              echo "‚ùå Port $port failed with code $code"
              curl -H "Content-Type: application/json" \
                -X POST \
                -d "{\"embeds\":[{\"title\":\"Validation Failed\",\"description\":\"Port $port returned code $code\"}]}" \
                ${{ secrets.DISCORD_WEBHOOK }}
              exit 1
            fi
          done

      - name: Validate JSON structure
        run: |
          for file in $(find . -name "*.json"); do
            echo "Checking $file..."
            jq empty "$file" || exit 1
          done

      - name: Check dev site
        run: |
          url="https://dev.example.com"
          code=$(curl -s -o /dev/null -w "%{http_code}" $url)
          if [ "$code" != "200" ]; then
            echo "‚ùå Dev site $url failed"
            curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"embeds\":[{\"title\":\"Dev site failed\",\"description\":\"$url returned $code\"}]}" \
              ${{ secrets.DISCORD_WEBHOOK }}
            exit 1
          fi

      - name: Take screenshots
        run: |
          mkdir -p screenshots
          docker ps --format '{{.Names}}' | while read name; do
            echo "Capturing $name"
            docker logs $name > "screenshots/${name}.log" || true
          done

  tag:
    name: üè∑Ô∏è Tag & Push Image
    runs-on: ubuntu-latest
    needs: [build, validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitLab Registry
        run: echo ${{ secrets.GITLAB_TOKEN }} | docker login registry.gitlab.com -u ${{ secrets.GITLAB_USER }} --password-stdin

      - name: Tag & Push
        run: |
          IMAGE="registry.gitlab.com/${{ secrets.GITLAB_PROJECT }}"
          VERSION=${{ env.new_tag || 'latest' }}
          docker compose build
          docker tag beebuilt_app $IMAGE:$VERSION
          docker push $IMAGE:$VERSION

  update:
    name: üîÑ Update Kubernetes Repo
    runs-on: ubuntu-latest
    needs: [tag]
    steps:
      - name: Checkout kube repo
        uses: actions/checkout@v4
        with:
          repository: your-org/kubernetes-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          path: kuberepo

      - name: Update image version
        run: |
          cd kuberepo
          yq e -i '.spec.template.spec.containers[0].image = "registry.gitlab.com/${{ secrets.GITLAB_PROJECT }}:${{ env.new_tag }}"' deployment.yaml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -am "Update BeeBuilt image to ${{ env.new_tag }}"
          git push
